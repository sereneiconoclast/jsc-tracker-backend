AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  JSCTrackerDomainName:
    Type: String
    Default: "jsc-tracker.infinitequack.net"
    Description: The domain name for the API Gateway.
  HostedZoneId:
    Type: String
    Default: "Z04354022LVBEOB5Q6PK4"
    Description: The zone ID in Route53.

Resources:
  JSCTrackerApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: JSC-Tracker
      Description: API Gateway for JSC Tracker
      EndpointConfiguration:
        Types:
          - REGIONAL
      # This appears to be necessary in order to create the alias 'A' record
      DisableExecuteApiEndpoint: false

  JSCTrackerCustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !ImportValue 'domain-certificate-DomainCertificateArn'
      DomainName: !Ref JSCTrackerDomainName
      EndpointConfiguration:
        Types:
          - REGIONAL

  JSCTrackerDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref JSCTrackerDomainName
      Type: A
      AliasTarget:
         DNSName: !GetAtt
          - JSCTrackerCustomDomainName
          - RegionalDomainName
         # https://docs.aws.amazon.com/general/latest/gr/apigateway.html
         HostedZoneId: Z2OJLYMUO9EFXC

  # /
  JSCTrackerBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ''
      DomainName: !Ref JSCTrackerDomainName
      RestApiId: !Ref JSCTrackerApi
      Stage: 'prod'

  # /admin
  JSCTrackerAdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt JSCTrackerApi.RootResourceId
      PathPart: admin
      RestApiId: !Ref JSCTrackerApi

  # /admin/jsc
  JSCTrackerAdminJscResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerAdminResource
      PathPart: jsc
      RestApiId: !Ref JSCTrackerApi

  # /admin/jsc/new
  JSCTrackerAdminJscNewResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerAdminJscResource
      PathPart: new
      RestApiId: !Ref JSCTrackerApi

  # /admin/users
  JSCTrackerAdminUsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerAdminResource
      PathPart: users
      RestApiId: !Ref JSCTrackerApi

  # /admin/users/assign
  JSCTrackerAdminUsersAssignResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerAdminUsersResource
      PathPart: assign
      RestApiId: !Ref JSCTrackerApi

  # /admin/users/grant_admin
  JSCTrackerAdminUsersGrantAdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerAdminUsersResource
      PathPart: grant_admin
      RestApiId: !Ref JSCTrackerApi

  # /admin/users/revoke_admin
  JSCTrackerAdminUsersRevokeAdminResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerAdminUsersResource
      PathPart: revoke_admin
      RestApiId: !Ref JSCTrackerApi

  # /admin/users/search
  JSCTrackerAdminUsersSearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerAdminUsersResource
      PathPart: search
      RestApiId: !Ref JSCTrackerApi

  # /user
  JSCTrackerUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt JSCTrackerApi.RootResourceId
      PathPart: user
      RestApiId: !Ref JSCTrackerApi

  # /user/{user_id}
  JSCTrackerUserUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerUserResource
      PathPart: "{user_id}"
      RestApiId: !Ref JSCTrackerApi

  # /user/{user_id}/contact
  JSCTrackerUserUserIdContactResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerUserUserIdResource
      PathPart: contact
      RestApiId: !Ref JSCTrackerApi

  # /user/{user_id}/contact/new
  JSCTrackerUserUserIdContactNewResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerUserUserIdContactResource
      PathPart: new
      RestApiId: !Ref JSCTrackerApi

  # /user/{user_id}/contact/{contact_id}
  JSCTrackerUserUserIdContactContactIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref JSCTrackerUserUserIdContactResource
      PathPart: "{contact_id}"
      RestApiId: !Ref JSCTrackerApi

  # POST /admin/jsc/new
  JSCTrackerPostAdminJscNewMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminJscNewResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
          - LambdaFunctionArn: !ImportValue jsc-tracker-lambda-JSCTrackerPostAdminJscNewLambdaFunctionArn

  # POST /admin/users/assign
  JSCTrackerPostAdminUsersAssignMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminUsersAssignResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
          - LambdaFunctionArn: !ImportValue jsc-tracker-lambda-JSCTrackerPostAdminUsersAssignLambdaFunctionArn

  # POST /admin/users/grant_admin
  JSCTrackerPostAdminUsersGrantAdminMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminUsersGrantAdminResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
          - LambdaFunctionArn: !ImportValue jsc-tracker-lambda-JSCTrackerPostAdminUsersGrantAdminLambdaFunctionArn

  # POST /admin/users/revoke_admin
  JSCTrackerPostAdminUsersRevokeAdminMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminUsersRevokeAdminResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
          - LambdaFunctionArn: !ImportValue jsc-tracker-lambda-JSCTrackerPostAdminUsersRevokeAdminLambdaFunctionArn

  # GET /admin/users/search
  JSCTrackerGetAdminUsersSearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminUsersSearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.email: false
        method.request.querystring.name: false
        method.request.querystring.jsc: false
        method.request.querystring.admin_only: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
          - LambdaFunctionArn: !ImportValue jsc-tracker-lambda-JSCTrackerGetAdminUsersSearchLambdaFunctionArn

  # GET /user/{user_id}
  JSCTrackerGetUserUserIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerUserUserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.user_id: true
      Integration:
        Type: AWS_PROXY
        # This must be POST, per https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-method-integration.html
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
          - LambdaFunctionArn: !ImportValue jsc-tracker-lambda-JSCTrackerGetUserUserIdLambdaFunctionArn

  # POST /user/{user_id}
  JSCTrackerPostUserUserIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerUserUserIdResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.user_id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
          - LambdaFunctionArn: !ImportValue jsc-tracker-lambda-JSCTrackerPostUserUserIdLambdaFunctionArn

  # POST /user/{user_id}/contact/new
  JSCTrackerPostUserUserIdContactNewMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerUserUserIdContactNewResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.user_id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
          - LambdaFunctionArn: !ImportValue jsc-tracker-lambda-JSCTrackerPostUserUserIdContactNewLambdaFunctionArn

  # POST /user/{user_id}/contact/{contact_id}
  JSCTrackerPostUserUserIdContactContactIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerUserUserIdContactContactIdResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.user_id: true
        method.request.path.contact_id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
          - LambdaFunctionArn: !ImportValue jsc-tracker-lambda-JSCTrackerPostUserUserIdContactContactIdLambdaFunctionArn

  # OPTIONS /admin/jsc/new
  JSCTrackerOptionsAdminJscNewMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminJscNewResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Max-Age: "'600'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Max-Age: true
          ResponseModels:
            application/json: Empty

  # OPTIONS /admin/users/assign
  JSCTrackerOptionsAdminUsersAssignMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminUsersAssignResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Max-Age: "'600'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Max-Age: true
          ResponseModels:
            application/json: Empty

  # OPTIONS /admin/users/grant_admin
  JSCTrackerOptionsAdminUsersGrantAdminMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminUsersGrantAdminResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Max-Age: "'600'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Max-Age: true
          ResponseModels:
            application/json: Empty

  # OPTIONS /admin/users/revoke_admin
  JSCTrackerOptionsAdminUsersRevokeAdminMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminUsersRevokeAdminResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Max-Age: "'600'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Max-Age: true
          ResponseModels:
            application/json: Empty

  # OPTIONS /admin/users/search
  JSCTrackerOptionsAdminUsersSearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerAdminUsersSearchResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Max-Age: "'600'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Max-Age: true
          ResponseModels:
            application/json: Empty

  # OPTIONS /user/{user_id}
  JSCTrackerOptionsUserUserIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerUserUserIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Max-Age: "'600'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Max-Age: true
          ResponseModels:
            application/json: Empty

  # OPTIONS /user/{user_id}/contact/new
  JSCTrackerOptionsUserUserIdContactNewMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerUserUserIdContactNewResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Max-Age: "'600'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Max-Age: true
          ResponseModels:
            application/json: Empty

  # OPTIONS /user/{user_id}/contact/{contact_id}
  JSCTrackerOptionsUserUserIdContactContactIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref JSCTrackerApi
      ResourceId: !Ref JSCTrackerUserUserIdContactContactIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.Origin: true
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Max-Age: "'600'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Max-Age: true
          ResponseModels:
            application/json: Empty

  # OPTIONS /user
  # JSCTrackerOptionsUserMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref JSCTrackerApi
  #     ResourceId: !Ref JSCTrackerUserResource
  #     HttpMethod: OPTIONS
  #     AuthorizationType: NONE
  #     RequestParameters:
  #       method.request.header.Origin: true
  #     Integration:
  #       Type: MOCK
  #       RequestTemplates:
  #         application/json: '{"statusCode": 200}'
  #       IntegrationResponses:
  #         - StatusCode: 200
  #           SelectionPattern: '.*'
  #           ResponseParameters:
  #             method.response.header.Access-Control-Allow-Origin: "'*'"
  #             method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
  #             method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
  #             method.response.header.Access-Control-Max-Age: "'600'"
  #           ResponseTemplates:
  #             application/json: ''
  #     MethodResponses:
  #       - StatusCode: 200
  #         ResponseParameters:
  #           method.response.header.Access-Control-Allow-Origin: true
  #           method.response.header.Access-Control-Allow-Headers: true
  #           method.response.header.Access-Control-Allow-Methods: true
  #           method.response.header.Access-Control-Max-Age: true
  #         ResponseModels:
  #           application/json: Empty

  JSCTrackerDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref JSCTrackerApi
      StageName: prod
      Description: !Sub "Deployment ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}-${AWS::StackId}"
    DependsOn:
      - JSCTrackerPostAdminJscNewMethod
      - JSCTrackerPostAdminUsersAssignMethod
      - JSCTrackerPostAdminUsersGrantAdminMethod
      - JSCTrackerPostAdminUsersRevokeAdminMethod
      - JSCTrackerGetAdminUsersSearchMethod
      - JSCTrackerGetUserUserIdMethod
      - JSCTrackerPostUserUserIdMethod
      - JSCTrackerPostUserUserIdContactNewMethod
      - JSCTrackerPostUserUserIdContactContactIdMethod
      - JSCTrackerOptionsAdminJscNewMethod
      - JSCTrackerOptionsAdminUsersAssignMethod
      - JSCTrackerOptionsAdminUsersGrantAdminMethod
      - JSCTrackerOptionsAdminUsersRevokeAdminMethod
      - JSCTrackerOptionsAdminUsersSearchMethod
      - JSCTrackerOptionsUserUserIdMethod
      - JSCTrackerOptionsUserUserIdContactNewMethod
      - JSCTrackerOptionsUserUserIdContactContactIdMethod
#     - JSCTrackerOptionsUserMethod

  JSCTrackerLambdaPermissionPostAdminJscNew:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        !ImportValue 'jsc-tracker-lambda-JSCTrackerPostAdminJscNewLambdaFunctionArn'
      Principal: apigateway.amazonaws.com

  JSCTrackerLambdaPermissionPostAdminUsersAssign:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        !ImportValue 'jsc-tracker-lambda-JSCTrackerPostAdminUsersAssignLambdaFunctionArn'
      Principal: apigateway.amazonaws.com

  JSCTrackerLambdaPermissionPostAdminUsersGrantAdmin:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        !ImportValue 'jsc-tracker-lambda-JSCTrackerPostAdminUsersGrantAdminLambdaFunctionArn'
      Principal: apigateway.amazonaws.com

  JSCTrackerLambdaPermissionPostAdminUsersRevokeAdmin:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        !ImportValue 'jsc-tracker-lambda-JSCTrackerPostAdminUsersRevokeAdminLambdaFunctionArn'
      Principal: apigateway.amazonaws.com

  JSCTrackerLambdaPermissionGetAdminUsersSearch:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        !ImportValue 'jsc-tracker-lambda-JSCTrackerGetAdminUsersSearchLambdaFunctionArn'
      Principal: apigateway.amazonaws.com

  JSCTrackerLambdaPermissionGetUserUserId:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        !ImportValue 'jsc-tracker-lambda-JSCTrackerGetUserUserIdLambdaFunctionArn'
      Principal: apigateway.amazonaws.com

  JSCTrackerLambdaPermissionPostUserUserId:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        !ImportValue 'jsc-tracker-lambda-JSCTrackerPostUserUserIdLambdaFunctionArn'
      Principal: apigateway.amazonaws.com

  JSCTrackerLambdaPermissionPostUserUserIdContactNew:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        !ImportValue 'jsc-tracker-lambda-JSCTrackerPostUserUserIdContactNewLambdaFunctionArn'
      Principal: apigateway.amazonaws.com

  JSCTrackerLambdaPermissionPostUserUserIdContactContactId:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        !ImportValue 'jsc-tracker-lambda-JSCTrackerPostUserUserIdContactContactIdLambdaFunctionArn'
      Principal: apigateway.amazonaws.com

Outputs:
  JSCTrackerApiId:
    Description: ID of the REST API
    Value: !Ref JSCTrackerApi
    Export:
      Name: !Sub '${AWS::StackName}-JSCTrackerApiId'

  JSCTrackerRegionalDomainName:
    Description: Regional domain name of the API
    Value: !GetAtt
      - JSCTrackerCustomDomainName
      - RegionalDomainName
    Export:
      Name: !Sub '${AWS::StackName}-JSCTrackerRegionalDomainName'
